{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYaqgJbl72R_qZLtc2O9HmjP9X8-1am10\",\n  authDomain: \"crwn-db-e31fa.firebaseapp.com\",\n  projectId: \"crwn-db-e31fa\",\n  storageBucket: \"crwn-db-e31fa.appspot.com\",\n  messagingSenderId: \"132540789602\",\n  appId: \"1:132540789602:web:34f3120da7eb8fb6e2f23b\",\n  measurementId: \"G-DH0ZCDM5KE\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n/*\n  export const createUserProfiledocument = async (userAuth, additionalData)=> {\n    if (!userAuth) return;\n    \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists){\n        const { displayName, email } = userAuth;\n        const createdAt =  new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (err) {\n            console.log('error creating user', err.message)\n        }\n    }\n\n    return userRef;\n  }\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({ prompt: 'select_account'});\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n*/\n\nexport default firebase;","map":{"version":3,"sources":["/Users/lenin/Desktop/Web Development/crwn-clothing2/src/utils/firebase/firebase.utils.js"],"names":["firebase","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","initializeApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,EAAuDC,kBAAvD,QAAiF,eAAjF;AAEA,SAASC,aAAT,QAA8B,cAA9B;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,+BAFO;AAGnBC,EAAAA,SAAS,EAAE,eAHQ;AAInBC,EAAAA,aAAa,EAAE,2BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAAvB;AAUA,MAAMC,WAAW,GAAGT,aAAa,CAACC,cAAD,CAAjC;AAEA,MAAMS,QAAQ,GAAG,IAAIX,kBAAJ,EAAjB;AAEAW,QAAQ,CAACC,mBAAT,CAA6B;AACzBC,EAAAA,MAAM,EAAE;AADiB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGjB,OAAO,EAApB;AACP,OAAO,MAAMkB,qBAAqB,GAAG,MAAMhB,eAAe,CAACe,IAAD,EAAOH,QAAP,CAAnD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,eAAef,QAAf","sourcesContent":["import firebase from 'firebase/compat/app'\nimport 'firebase/compat/firestore';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\n\nimport { initializeApp } from 'firebase/app'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCYaqgJbl72R_qZLtc2O9HmjP9X8-1am10\",\n    authDomain: \"crwn-db-e31fa.firebaseapp.com\",\n    projectId: \"crwn-db-e31fa\",\n    storageBucket: \"crwn-db-e31fa.appspot.com\",\n    messagingSenderId: \"132540789602\",\n    appId: \"1:132540789602:web:34f3120da7eb8fb6e2f23b\",\n    measurementId: \"G-DH0ZCDM5KE\"\n  };\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({ \n    prompt: 'select_account'\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n/*\n  export const createUserProfiledocument = async (userAuth, additionalData)=> {\n    if (!userAuth) return;\n    \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists){\n        const { displayName, email } = userAuth;\n        const createdAt =  new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (err) {\n            console.log('error creating user', err.message)\n        }\n    }\n\n    return userRef;\n  }\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({ prompt: 'select_account'});\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n*/\n  export default firebase;"]},"metadata":{},"sourceType":"module"}